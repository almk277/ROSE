Module is a piece of code and data in a separate file.
It is just about the same as class in Java.

Every module has it's own name and path. Full name includes
path and name and must be unique.
Module name is it's file name, and module path is a relative
path to it's file in ROSE module directory.

For example, if ROSE module directory is '/usr/share/rose/module/',
and some module 'example.rmd' is placed in directory
'/usr/share/rose/module/base/test/', then module name is 'example',
it's path is 'base/test', and the full name is 'base/test/example'.

Module can contain up to 255 instance variables and up to 255 procedures.
Every procedure might have up to 255 variables.
Module also can import up to 255 procedures from up to 255 modules.

All variables are private, i.e. they might be used only inside this
module procedures. Procedure itself might be public (accessible by other
modules), or private (accessible by this module procedures only).

Module has a version, which is described by two numbers: major and minor.
If new version API is incompatible with previous one, ABI is broken. In this
case, major number is increased, and minor number is 0.  Otherwise,
if old API is still alive, ABI is the same. In this case, major
number remains the same, and minor number is increased.
In fact, ROSE ABI is the same as API.
When module depends on another module M, it depends on M version as
well. When resolving dependencies, VM searches for M with the same major
number, and minor number greater or equal to one stored in dependency.
Otherwise, M will not be used.

New module instance (object) can be created and deleted with appropriate
instructions. This includes new data set, but other segments are shared.

Module entry point is procedure named 'main', if exists.
