There is segmented memory model. Segments are:
        GLOBAL:
	*  .heap - area for dynamic memory allocation;
        THREAD-LOCAL:
	*  .varstack - procedure arguments and local variables;
	*  .procstack  - internal procedure stack;
        MODULE-LOCAL:
	*  .ptbl - procedure table;
	*  .mtbl - module table;
	*  .imp  - import table;
	*  .exp  - export table;
	*  .text - program instructions;
	*  .sym  - runtime symbol table;
	*  .str  - data constant pool;
        MODULE-INSTANCE-LOCAL:
	*  .data - module instance variables;

All module-local segments are loaded from RMD.

  .stack            Stack consists of 32-bit words.
----------          BP points to the current stack frame.
|  valN  |          
|--------|          
|  ...   |
|--------|           .proc
|  val1  |          -------           There is also procedure stack
|--------|          | RET | <- PSP    .proc. It's head pointer is PSP.
|  refM  |          |-----|           This stack is not accessible by program
|--------|          | OVP |           directly, it is used by procedure call
|  ...   |          |-----|           instructions.
|--------|          | ORP |
|  ref1  |          |=====|
|--------|          | RET |
|  argL  |          -------
|--------|
|  ...   |          All procedure arguments are references.
|--------|          Total stack frame size is up to 255 words.
|  arg0  | <- BP    
----------

You can dynamically allocate memory with 'new' and 'arrnew' instructions.
You can not delete such objects - runtime (namely, garbage collector)
deletes them automatically when they are no longer needed.
