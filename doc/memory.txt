There is segmented memory model. Segments are:
        GLOBAL:
	*  .heap - area for dynamic memory allocation;
        THREAD-LOCAL:
	*  .vstack - procedure arguments and local variables;
	*  .pstack  - internal procedure stack;
        MODULE-LOCAL:
	*  .ptbl - procedure table;
	*  .mtbl - module table;
	*  .imp  - import table;
	*  .exp  - export table;
	*  .text - program instructions;
	*  .sym  - runtime symbol table;
	*  .str  - data constant pool;
        MODULE-INSTANCE-LOCAL:
	*  .data - module instance variables;

All module-local segments are loaded from RMD.

.vstack contains procedure arguments and local variables.
VARS points to the current stack frame.
Stack frame size is variable: it depends on argument and variable counts.
Total stack frame size is up to 255 words.
All procedure arguments are references.

 .vstack            .pstack
|--------|          |------|
|  varN  |          | MOD  |
|--------|          |----- |
|  ...   |          | PROC |
|--------|          |----- |
|  var1  |          | VARS |
|--------|          |----- |
|  argL  |          | RET  | <- PROCS
|--------|          -------
|  ...   |
|--------|
|  arg0  | <- VARS
----------

procedure stack .pstack contains procedure activation records.
PROCS points to the current stack frame.
Stack frame size is fixed.
This stack is not accessible by program directly, it is used
by procedure call instructions.

Memory from heap dynamically allocates with #new, #arr.new and some other
instructions. You can not delete such objects - runtime (namely,
garbage collector) deletes them automatically when they are no longer needed.
Note that some some types are value types, and they constructors (#int.new, for
example) does not use heap.
