#! /usr/bin/perl -w

# This script parses source code with instruction declarations
# and creates some files

use strict;

my $src_file = "isa.cpp";
my $hdr_file = "isa_decl.h";
my $opc_file = "opc_table.c";
my $pdb_file = "db.pl";

my $warn_hdr = "" .
	"/* This file is automatically generated from $src_file\n" .
	" * All your changes will be lost\n" .
	" */\n\n";
my (@names, @descr);
my (%opcodes, %args);

open(SRC, "<$src_file") || die("$src_file: $!\n");
open(HDR, ">$hdr_file") || die("$hdr_file: $!\n");
open(OPC, ">$opc_file") || die("$opc_file: $!\n");
open(PDB, ">$pdb_file") || die("$pdb_file: $!\n");

$#descr = $#names = 255;
read_source();
write_decl();
write_table();
write_db();
print "All done\n";
exit;

# Read source and create data structures
sub read_source {
	print "Reading $src_file...\n";
	while(defined(my $line = <SRC>)) {
		if($line =~ /INSTR/ && !($line =~ /#define/)) {
			if($line =~ /INSTR\s*\(\s*(\w+)\s*,\s*(0[xX][\dA-F]{2})\s*,\s*"(\w+)"\s*,\s*"(.+)"/) {
				my $idx = hex $2;
				defined($names[$idx]) &&
					die "Error: $names[$idx] and $1 both have opcode $2\n";
				$names[$idx] = $1;
				$descr[$idx] = $4;
				$opcodes{$1} = $2;
				$args{$1} = $3;
			} else {
				die "Error: can not parse: $line\n";
			}
		}
	}
	close(SRC);
}

# Create header file with function declarations
sub write_decl {
	print "Writing $hdr_file...\n";
	print HDR $warn_hdr;
	for(my $i = 0; $i != 256; ++$i) {
		if(defined($names[$i])) {
			printf HDR "// [0x%.2X] $descr[$i]\nDECL_INSTR($names[$i]);\n", $i;
		}
	}
	print HDR "\n";
	close(HDR) || die "$hdr_file: $!\n";
}

# Create source file with opcode table
sub write_table {
	print "Writing $opc_file...\n";
	print OPC $warn_hdr;
	print OPC "" .
		"#ifndef NEED_OPCODES\n" .
		"#error This file can not be compiled\n" .
		"#endif\n\n";
	for(my $i = 0; $i != 256; ++$i) {
		my $out;
		if(defined($names[$i])) {
			$out = "F($names[$i])";
		} else {
			$out = "ERROR";
		}
		$out = $out . ",";
		printf OPC "%-15s// 0x%.2X\n", $out, $i;
	}
	close(OPC) || die "$opc_file: $!\n";
}

sub write_db {
	print "Writing $pdb_file...\n";
	print PDB "%instr = (\n";
	foreach my $name (keys %opcodes) {
		printf PDB "\t%-10s => [ %s, \"%s\" ],\n",
			$name, $opcodes{$name}, $args{$name};
	}
	print PDB ");\n";
	close(PDB) || die "$pdb_file: $!=\n";
}

